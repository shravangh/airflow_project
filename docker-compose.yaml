x-airflow-common:
  &airflow-common
  image: apache/airflow:2.9.1
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./assignment_telco/logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./requirements.txt:/opt/airflow/requirements.txt
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 10s
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data

  airflow-init:
    <<: *airflow-common
    command: >
      bash -c "airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password admin"
    restart: "no"

  webserver:
    <<: *airflow-common
    command: bash -c "pip install -r /opt/airflow/requirements.txt && airflow webserver"
    ports:
      - "8080:8080"
    restart: always

  scheduler:
    <<: *airflow-common
    command: bash -c "pip install -r /opt/airflow/requirements.txt && airflow scheduler"
    restart: always

  mlflow:
    image: python:3.9
    command: >
      bash -c "pip install --upgrade pip && pip install mlflow psycopg2-binary && mlflow server --backend-store-uri file:///opt/airflow/logs/assignment_telco/mlruns --default-artifact-root file:///opt/airflow/logs/assignment_telco/mlruns --host 0.0.0.0 --port 5000"
    volumes:
      - ./assignment_telco/logs/assignment_telco/mlruns:/opt/airflow/logs/assignment_telco/mlruns
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    restart: always

volumes:
  postgres_data: